appl: erestml [
    doc: "Restriction site Maximum Likelihood method"
    group: "phylip"
   ]

infile: datafile [ 
         param: Y 
	 info: "Input file" ]

outfile: outfile [ 
         param: Y
         def: "erestml.outfile" ]

bool: besttree [
      opt: Y
      def: Y
      info: "Search for best tree" ]

bool: allsites [
      opt: Y 
      def: Y
      info: "Are all sites detected" ]

bool: lengths [
      opt: "@(!$(besttree))"
      def: N
      info: "Use lengths from user trees" ]

int: sitelen [
     opt : Y
     def: 6
     min: 1
     max: 8
     info: "Site length" ]

float: extrap [
       opt: Y
       def: 100.0
       min: 0.001
       info: "Extrapolation factor" ]

bool: global [
      opt: "$(besttree)" 
      def: N
      info: "Global rearrangements" ]

bool: random [ 
      req: "$(besttree)"
      def: N 
      info: "Randomize input order of species" ]

int: randseed [ 
     req: "$(random)" 
     def: 3
     info: "Random number seed (must be odd)" ]

int: randtimes [ 
     req: "$(random)" 
     def: 3
     info: "How many times to randomise" ]

bool: og [ 
      opt: Y 
      info: "Outgroup root" 
      def: N ]

int: outgnum [ 
     req: "$(og)"
     min: 1 
     def: 1
     info: "number of the outgroup" ]

bool:  multsets [ 
       opt: Y 
       def: N 
       info: "Analyze multiple data sets" ]

int: datasets [
     req: "$(multsets)"
     min: 2
     def: 2
     info: "number of sets" ]

bool: printdata [ 
      opt: Y 
      def: N 
      info: "Print out the data at start of run" ]

bool: progress [ 
      opt: Y 
      def: N 
      info: "Print indications of progress of run" ]

bool: drawtree [ 
      opt: Y 
      def: Y
      information: "Draw tree" ]

bool: trout [ 
      param: Y 
      def: Y
      information: "Create a tree file" ]

outfile: treefile [
          req: "$(trout)" 
          def: "erestml.treefile"
          info: "Tree file name" 
          prompt: "Output treefile name" ]
