appl: epenny [
    doc: "Penny algorithm, branch-and-bound to find all most parsimonious trees "
    group: "phylip"
   ]

infile: infile [
	param: Y
	prompt: "data file" ]

outfile: outfile [ 
         param: Y
         def: "epenny.outfile" ]

list: method [ req: y min: 1 max: 1
    header: "Method"
    values: "Wag:Wagner;
             Cam:Camin-Sokal;
             Mix:Mixed;"
    prompt: "Choose the method to use"
    def: Wag
]

int: numgroups [
     opt: Y
     info: "How many groups of  100 trees"
     def: 1000 ]

int: howoften [
     opt: Y
     info: "How often to report, in trees"
     def: 100 ]

bool: simple [
      opt: Y
      info: "Branch and bound is simple" ]

bool: og [ 
      opt: Y 
      info: "Outgroup root" 
      def: N ]

int: outgnum [ 
     req: "$(og)"
     min: 1 
     def: 1
     info: "number of the outgroup" ]

bool: thresh [
      req: N
      def: N
      info: "Use Threshold parsimony" ]

float: valthresh [
     req: "$(thresh)"
     min: 1.0
     def: 1.0
     info: "threshold value" ]

bool:  multsets [ 
       opt: Y 
       def: N 
       info: "Analyze multiple data sets" ]

int: datasets [ 
     req: "$(multsets)" 
     info: "How many data sets" ]

bool: printdata [ 
      opt: Y 
      def: N 
      info: "Print out the data at start of run" ]

bool: progress [ 
      opt: Y 
      def: N 
      info: "Print indications of progress of run" ]

bool: steps [ 
      opt: Y 
      def: N
      information: "Print out steps in each site" ]

bool: seqatnodes [ 
      opt: Y 
      def: N
      information: "Print sequences at all nodes of tree" ]

bool: drawtree [ 
      opt: Y 
      def: Y
      information: "Draw tree" ]

bool: trout [ 
      param: Y 
      def: Y
      information: "Create a tree file" ]

outfile: treefile [
          req: "$(trout)" 
          def: "epenny.treefile"
          info: "Tree file name" 
          prompt: "Output treefile name" ]
