appl: edolpenny [
    doc: "Penny algorithm Dollo or polymorphism"
    group: "phylip"
   ]

infile: datafile [
	param: Y
	prompt: "data file" ]

outfile: outfile [ 
         param: Y
         def: "edolpenny.outfile" ]

bool: dollo [
      param: Y
      def: Y
      prompt: "Dollo Parsimony method (else Polymorphis)" ]

int: numgroups [
     opt: Y
     info: "How many groups of  100 trees"
     def: 1000 ]

int: howoften [
     opt: Y
     info: "How often to report, in trees"
     def: 100 ]

bool: simple [
      opt: Y
      info: "Branch and bound is simple" ]

bool: thresh [
      req: N
      def: N
      info: "Use Threshold parsimony" ]

float: valthresh [
     req: "$(thresh)"
     min: 1.0
     def: 1.0
     info: "threshold value" ]

bool: ancest [
      opt: Y
      def: N 
      info: "Use ancestral states in input file" ]

bool:  multsets [ 
       opt: Y 
       def: N 
       info: "Analyze multiple data sets" ]

int: datasets [
     req: "$(multsets)"
     min: 2
     def: 2
     info: "number of sets" ]

bool: printdata [ 
      opt: Y 
      def: N 
      info: "Print out the data at start of run" ]

bool: progress [ 
      opt: Y 
      def: N 
      info: "Print indications of progress of run" ]

bool: steps [ 
      opt: Y 
      def: N
      information: "Print out steps in each site" ]

bool: statesatnodes [ 
      opt: Y 
      def: N
      information: "Print states at all nodes of tree" ]

bool: drawtree [ 
      opt: Y 
      def: Y
      information: "Draw tree" ]

bool: trout [ 
      param: Y 
      def:Y
      information: "Create a tree file" ]

outfile: treefile [
          req: "$(trout)" 
          def: "edolpenny.treefile"
          info: "Tree file name" 
          prompt:"Output treefile name" ]
