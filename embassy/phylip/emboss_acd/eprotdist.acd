appl: eprotdist [
    doc: "Protein distance algorithm"
    group: "phylip"
   ]

seqset: msf [ 
        param: Y
        type: gapany
        prompt: "Sequences file to be read in"
        help: "File containing sequences" ]

outfile: outfile [ 
         param: Y
         def: "eprotdist.outfile" ]

list: method [ req: y min: 1 max: 1
    header: "Method"
    values: "Pam:Dayhoff PAM matrix;
             Kim:Kimura formula;
             Cat:Categories model"
    prompt: "Choose the method to use"
    def: Pam ]

list: categ [ 
      opt:  "@($(method) == Cat)" 
      min: 1 
      max: 1
    header: "categorization of amino acids\n all have groups: (Glu Gln
      Asp Asn), (Lys Arg His), (Phe Tyr Trp) plus:-"
    values: "G:George/Hunt/Barker (Cys), (Met   Val  Leu  Ileu), (Gly  Ala  Ser  Thr    Pro);
             C:Chemical           (Cys   Met), (Val  Leu  Ileu    Gly  Ala  Ser  Thr), (Pro);
             H:Hall               (Cys), (Met   Val  Leu  Ileu), (Gly  Ala  Ser  Thr), (Pro)"
    prompt: "Choose the categorie to use"
    def: G ]

list: gencode [ 
      opt:  "@($(method) == Cat)" 
      min: 1 
      max: 1
      header: "Which genetic code"
      values: "U:Universal;
	       M:Mitochondrial;
	       V:Vertebrate mitochondrial;
	       F:Fly mitochondrial;
	       Y:Yeast mitochondrial"
      prompt: "Which genetic code"
      def: U ]

float: prob [
       opt:  "@($(method) == Cat)" 
       min: 0.0
       max: 1.0
       def: 0.457
       info: " Prob change category (1.0=easy)" ]

float: tranrate [
       opt: "@($(method) == Cat)"
       min: 0.0
       def: 2.0
       info: "Transition/transversion ratio" ]

bool: basefrequency [
      opt: "@($(method) == Cat)" 
      def: Y
      prompt: "Use empirical base frequencies" ]

float: freqa [ opt: "@(!$(basefrequency))" min: 0.0 max: 1.0 def: 0.25
              prompt: "Frequency for A" ]

float: freqc [ opt: "@(!$(basefrequency))" min: 0.0 max: 1.0 def: 0.25
              prompt: "Frequency for C" ]

float: freqg [ opt: "@(!$(basefrequency))" min: 0.0 max: 1.0 def: 0.25
              prompt: "Frequency for G" ]

float: freqt [ opt: "@(!$(basefrequency))" min: 0.0 max: 1.0 def: 0.25
              prompt: "Frequency for T/U" ]

bool: printdata [ 
      opt: Y 
      def: N 
      info: "Print out the data at start of run" ]

bool: progress [ 
      opt: Y 
      def: N 
      info: "Print indications of progress of run" ]

