appl: emix [
    doc: "Mixed parsimony algorithm"
    group: "phylip"
   ]

infile: infile [
	param: Y
	prompt: "data file" ]

outfile: outfile [ 
         param: Y
         def: "emix.outfile" ]

bool: besttree [
      param: Y
      def: Y
      info: "Search for best tree" ]

list: method [ req: y min: 1 max: 1
    header: "Method"
    values: "Wag:Wagner;
             Cam:Camin-Sokal;
             Mix:Mixed;
    prompt: "Choose the method to use"
    def: Wag
]

bool: random [ 
      opt: "$(besttree)" 
      def: N 
      info: "Randomize input order of species" ]

int: randseed [ 
     req: "$(random)" 
     info: "Random number seed (must be odd)" ]

int: randtimes [ 
     req: "$(random)" 
     info: "Number of times to jumble" ]

#bool: global [ 
#      opt: "$(besttree)" 
#      def: N 
#      info: "Global rearrangements" ]

bool: og [ 
      req: Y 
      info: "Outgroup root" 
      def: N ]

int: outgnum [ 
     req: "$(og)" 
     min: 1
     def: 1
#     max: "@($(msf.count))"  
     info: "number of the outgroup" ]

bool: thresh [
      req: N
      def: N
      info: "Use Threshold parsimony" ]

float: valthresh [
     req: "$(thresh)"
     min: 1.0
     def: 1.0
     info: "threshold value" ]

bool: ancestral [
      opt: Y
      def : N
      info: "Use ancestral states in input file"
      prompt: "Use ancestral states in input file" ]

bool:  multsets [ 
       opt: Y 
       def: N 
       info: "Analyze multiple data sets" ]

int: datasets [ 
     req: "$(multsets)" 
     info: "How many data sets" ]

bool: printdata [ 
      opt: Y 
      def: N 
      info: "Print out the data at start of run" ]

bool: progress [ 
      opt: Y 
      def: N 
      info: "Print indications of progress of run" ]

bool: statesatnodes [ 
      opt: Y 
      def: N
      information: "Print states at all nodes of tree" ]

bool: steps [ 
      opt: Y 
      def: N
      information: "Print out steps in each character" ]

bool: trout [ 
      param: Y 
      def: Y
      information: "Create a tree file" ]

bool: drawtree [ 
      opt: Y 
      def: Y
      information: "Draw tree" ]

outfile: treefile [
          req: "$(trout)" 
          def: "emix.treefile" 
          info: "Tree file name" 
          prompt: "Treefile name" ]
