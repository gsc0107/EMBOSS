section: input [=============]

# single set
seqset: sequence [
  parameter: "Y"
  type: "gapany"
]

#multiple set .multicount
seqsetall: sequence [
  parameter: "Y"
  information: "One or more sequence sets"
]

#weights max: Z/1 nullok=optional size=1 for single length=seqlen
weight: weightfile [
  parameter: "Y"
  information: "Weights file"
  nullok: "Y"
  maxweight: "Z"
  size: "1"
  length: "$(sequence.len)"
]

# phylip input files - specify the type
infile: infile [
  parameter: "Y"
  information: "input file"
  standardtype: "xxx file"
]

# tree nullok=optional size=1 for single
tree: intreefile [
  parameter: "Y"
  standardtype: "Newick tree"
  nullok: "Y"
  size: "1"
]

section: output [=============]

# simple text output file from phylip
outfile: outfile  [
  parameter: "Y"
  standardtype: "xxx file"
]

# tree file
outfile: outtreefile  [
  required: "Y"
  extension: "outtree"
  information: "Tree file name"
  nullok: "Y"
  standardtype: "Newick tree"
]

# weights file
outfile: outweightfile  [
  parameter: "Y"
  extension: "outweightfile"
  information: "Output weight file name"
  nullok: "Y"
  standardtype: "Phylip weights"
]

boolean: progress [
  optional: "Y"
  default: "N"
  information: "Print indications of progress of run"
]

integer: howoften [
  optional: "Y"
  information: "How often to report, in trees"
  minimum: "1"
  default: "100"
]

integer: howmany [
  optional: "Y"
  information:"How many groups of reported trees"
  minimum: "1"
  default: "1000"
]


section: phylogeny [=================]

integer: jumble [
  optional: "Y"
  information: "Number of times to jumble"
  minimum: "1"
  default: "1"

]

integer: seed [
  optional: "$(jumble)"
  information: "Random number seed (must be odd)"
  minimum: 1
  maximum: "32765"
  default: 1
]

integer: outgroup [
  optional: "Y"
  information: "Number of the outgroup"
  default: "0"
  minimum: "0"
  maximum: "$(sequence.size)"
 ]

float: threshold [
  optional: "Y"
  information: "Threshold value"
  minimum: "1.0"
  maximum: "$(sequence.size)"
  default: "$(sequence.size)"
]

section: categories [=======================]

integer: categories [
  optional: "Y"
  information: "Number of categories"
  minimum: "1"
  default: "1"
  maximum: "9"
]

array: rates [
  required: "$(categories)"
  information: "Rates for each category"
  size: "$(categories)"
  sum; "1.0"
  minimum: "0.0"
  maximum: "1.0"
]

array: probabilities [
  required: "$(categories)"
  information: "Probabilities for each category"
  size: "$(categories)"
  sum; "1.0"
  minimum: "0.0"
  maximum: "1.0"
]

section: distance_matrix [==============================]

float: lambda [
  optional: "Y"
  information: "Mean block length of sites having the same rate"
  minimum: "1.0"
  default: "1.0"
]

array: basefreqs [
  optional: "Y"
  information: "Base frequencies for A, C, G, T/U"
  size: "4"
  minimum: "0.0"
  maximum: "1.0"
  default; "0.25"
]

float: ttratio [
  optional: "Y"
  information: "Transition/transversion ratio"
  default: "2.0"
  minimum: "0.0"
]

float: power [
  optional: "Y"
  information: "Power"
  default: "2.0"
  minimum: "1.0"
]

section: discrete [=================================]
# 01? allowed
weight: ancestral [
  optional: "Y"
  nullok: "Y"
  weight: "01?"
  information: "Ancestral states in input file"
  standardtype: "Phylip ancestral states"
]

# any symbol allowed
weight: factors [
  optional: "Y"
  nullok: "Y"
  weight: ""
  information: "Ancestral states in input file"
  standardtype: "Phylip factors"
]

# any symbol allowed
weight: mixture [
  optional: "Y"
  nullok: "Y"
  weight: "CSW"
  information: "Ancestral states in input file"
  standardtype: "Phylip factors"
]
