<table border cellspacing=0 cellpadding=3 bgcolor="#ccccff">
<tr bgcolor="#FFFFCC">
<th align="left">Qualifier</th>
<th align="left">Type</th>
<th align="left">Description</th>
<th align="left">Allowed values</th>
<th align="left">Default</th>
</tr>

<tr bgcolor="#FFFFCC">
<th align="left" colspan=5>Standard (Mandatory) qualifiers</th>
</tr>

<tr bgcolor="#FFFFCC">
<td>[-dcfinfile]<br>(Parameter 1)</td>
<td>infile</td>
<td>This option specifies name of DCF file (domain classification file) (input). A 'domain classification file' contains classification and other data for domains from SCOP or CATH, in DCF format (EMBL-like). The files are generated by using SCOPPARSE and CATHPARSE. Domain sequence information can be added to the file by using DOMAINSEQS.</td>
<td>Input file</td>
<td><b>Required</b></td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-retain</td>
<td>toggle</td>
<td>This option specifies whether to write redundant domains to a separate file. If this option is selected, redundant domains are written to a separate output file.</td>
<td>Toggle value Yes/No</td>
<td>No</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-node</td>
<td>list</td>
<td>This option specifies the node for redundancy removal. Redundancy can be removed at any specified node in the SCOP or CATH hierarchies. For example by selecting 'Class' entries belonging to the same Class will be non-redundant.</td>
<td><table><tr><td>1</td> <td><i>(Class (SCOP))</i></td></tr><tr><td>2</td> <td><i>(Fold (SCOP))</i></td></tr><tr><td>3</td> <td><i>(Superfamily (SCOP))</i></td></tr><tr><td>4</td> <td><i>(Family (SCOP))</i></td></tr><tr><td>5</td> <td><i>(Class (CATH))</i></td></tr><tr><td>6</td> <td><i>(Architecture (CATH))</i></td></tr><tr><td>7</td> <td><i>(Topology (CATH))</i></td></tr><tr><td>8</td> <td><i>(Homologous Superfamily (CATH))</i></td></tr><tr><td>9</td> <td><i>(Family (CATH))</i></td></tr></table></td>
<td>1</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-mode</td>
<td>list</td>
<td>This option specifies whether to remove redundancy at a single threshold % sequence similarity or remove redundancy outside a range of acceptable threshold % similarity. All permutations of pair-wise sequence alignments are calculated for each domain family in turn using the EMBOSS implementation of the Needleman and Wunsch global alignment algorithm. Redundant sequences are removed in one of two modes as follows: (i) If a pair of proteins achieve greater than a threshold percentage sequence similarity (specified by the user) the shortest sequence is discarded. (ii) If a pair of proteins have a percentage sequence similarity that lies outside an acceptable range (specified by the user) the shortest sequence is discarded.</td>
<td><table><tr><td>1</td> <td><i>(Remove redundancy at a single threshold % sequence similarity)</i></td></tr><tr><td>2</td> <td><i>(Remove redundancy outside a range of acceptable threshold % similarity)</i></td></tr></table></td>
<td>1</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-threshold</td>
<td>float</td>
<td>This option specifies the % sequence identity redundancy threshold, which determines the redundancy calculation. If a pair of proteins achieve greater than this threshold the shortest sequence is discarded.</td>
<td>Any numeric value</td>
<td>95.0</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-threshlow</td>
<td>float</td>
<td>This option specifies the % sequence identity redundancy threshold, which determines the redundancy calculation. If a pair of proteins have a percentage sequence similarity that lies outside an acceptable range the shortest sequence is discarded.</td>
<td>Any numeric value</td>
<td>30.0</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-threshup</td>
<td>float</td>
<td>This option specifies the % sequence identity redundancy threshold, which determines the redundancy calculation. If a pair of proteins have a percentage sequence similarity that lies outside an acceptable range the shortest sequence is discarded.</td>
<td>Any numeric value</td>
<td>90.0</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>[-dcfoutfile]<br>(Parameter 2)</td>
<td>outfile</td>
<td>This option specifies the name of non-redundant DCF file (domain classification file) (output). A 'domain classification file' contains classification and other data for domains from SCOP or CATH, in DCF format (EMBL-like). The files are generated by using SCOPPARSE and CATHPARSE. Domain sequence information can be added to the file by using DOMAINSEQS.</td>
<td>Output file</td>
<td>test.scop</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-redoutfile</td>
<td>outfile</td>
<td>This option specifies the name of DCF file (domain classification file) for redundant sequences (output). A 'domain classification file' contains classification and other data for domains from SCOP or CATH, in DCF format (EMBL-like). The files are generated by using SCOPPARSE and CATHPARSE. Domain sequence information can be added to the file by using DOMAINSEQS.</td>
<td>Output file</td>
<td><i>&lt;*&gt;</i>.domainnr</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-logfile</td>
<td>outfile</td>
<td>This option specifies the name of log file for the build. The log file contains messages about any errors arising while domainnr ran.</td>
<td>Output file</td>
<td>domainnr.log</td>
</tr>

<tr bgcolor="#FFFFCC">
<th align="left" colspan=5>Additional (Optional) qualifiers</th>
</tr>

<tr bgcolor="#FFFFCC">
<td>-datafile</td>
<td>matrixf</td>
<td>This option specifies the residue substitution matrix. This is used for sequence comparison.</td>
<td>Comparison matrix file in EMBOSS data path</td>
<td>EBLOSUM62</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-gapopen</td>
<td>float</td>
<td>This option specifies the gap insertion penalty. This is the score taken away when a gap is created. The best value depends on the choice of comparison matrix. The default value assumes you are using the EBLOSUM62 matrix for protein sequences, and the EDNAFULL matrix for nucleotide sequences.</td>
<td>Floating point number from 1.0 to 100.0</td>
<td>10.0 for any sequence</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-gapextend</td>
<td>float</td>
<td>This option specifies the gap extension penalty. This is added to the standard gap penalty for each base or residue in the gap. This is how long gaps are penalized. Usually you will expect a few long gaps rather than many short gaps, so the gap extension penalty should be lower than the gap penalty.</td>
<td>Floating point number from 0.0 to 10.0</td>
<td>0.5 for any sequence</td>
</tr>

<tr bgcolor="#FFFFCC">
<th align="left" colspan=5>Advanced (Unprompted) qualifiers</th>
</tr>

<tr>
<td colspan=5>(none)</td>
</tr>

<tr bgcolor="#FFFFCC">
<th align="left" colspan=5>Associated qualifiers</th>
</tr>

<tr bgcolor="#FFFFCC">
<th align="left" colspan=5>"-dcfoutfile" associated outfile qualifiers
</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -odirectory2<br>-odirectory_dcfoutfile</td>
<td>string</td>
<td>Output directory</td>
<td>Any string</td>
<td>&nbsp;</td>
</tr>

<tr bgcolor="#FFFFCC">
<th align="left" colspan=5>"-redoutfile" associated outfile qualifiers
</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -odirectory</td>
<td>string</td>
<td>Output directory</td>
<td>Any string</td>
<td>&nbsp;</td>
</tr>

<tr bgcolor="#FFFFCC">
<th align="left" colspan=5>"-logfile" associated outfile qualifiers
</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -odirectory</td>
<td>string</td>
<td>Output directory</td>
<td>Any string</td>
<td>&nbsp;</td>
</tr>

<tr bgcolor="#FFFFCC">
<th align="left" colspan=5>General qualifiers</th>
</tr>

<tr bgcolor="#FFFFCC">
<td> -auto</td>
<td>boolean</td>
<td>Turn off prompts</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -stdout</td>
<td>boolean</td>
<td>Write first file to standard output</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -filter</td>
<td>boolean</td>
<td>Read first file from standard input, write first file to standard output</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -options</td>
<td>boolean</td>
<td>Prompt for standard and additional values</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -debug</td>
<td>boolean</td>
<td>Write debug output to program.dbg</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -verbose</td>
<td>boolean</td>
<td>Report some/full command line options</td>
<td>Boolean value Yes/No</td>
<td>Y</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -help</td>
<td>boolean</td>
<td>Report command line options and exit. More information on associated and general qualifiers can be found with -help -verbose</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -warning</td>
<td>boolean</td>
<td>Report warnings</td>
<td>Boolean value Yes/No</td>
<td>Y</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -error</td>
<td>boolean</td>
<td>Report errors</td>
<td>Boolean value Yes/No</td>
<td>Y</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -fatal</td>
<td>boolean</td>
<td>Report fatal errors</td>
<td>Boolean value Yes/No</td>
<td>Y</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -die</td>
<td>boolean</td>
<td>Report dying program messages</td>
<td>Boolean value Yes/No</td>
<td>Y</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -version</td>
<td>boolean</td>
<td>Report version number and exit</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

</table>
