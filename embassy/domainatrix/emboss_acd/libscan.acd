application: libscan [
  documentation: "Scans a database with a set of models that
                  represents a family"
  groups: "Protein:3D Structure"
  embassy: "domainatrix"
]

section: input [
  information: "Input section"
  type: "page"
]

  list: mode  [
    required: "Y"
    default: "1"
    minimum: "1"
    maximum: "1"
    delimiter: ","
    codedelimiter: ":"
    values: "1: Database search mode, 2: Library screen mode"
    header: "The scanning modes"
    information: "Select mode of operation "
    button: "Y"
    help: "Libscan runs in one of two modes either (i) database search
           mode or (ii) library screen mode. In database search mode
           libscan reads one or more directories each containing a
           single type of discriminating element, the permitted types
           are sparse sequence signature, Gribskov profile, Henikoff
           profile or hidden Markov model.  In library screen mode,
           libscan reads a sequence set, screens each sequence against
           the library (directories of discriminating elements) and
           writes a library scan file (of top-scoring families) for each one."
  ]

########################
# Database parameters
########################
  seqset: db [
    required: "Y"
    information: "File containing sequences to search or screen"
    help: "In database search mode libscan scans each discriminating
           element against a sequence set.  In library screen mode,
           libscan reads a sequence set and screens each sequence
           against the library (directories of disciminating elements)"
#    default: "./49142.dhf"
     type: "protein"
  ]


  ########################
  # other parameters
  ########################
  infile: scopf [
    required: "Y"
    information: "SCOP classification file (input)"
    help: "In either mode, a 'scop classification file' is required as
           a source of family classification data.  A scop
           classification file contains classification and other data
           for domains from the scop database.  The file is in embl-like
           format and is generated by scopparse.  Domain sequence
           information can be added to the file by using scopseqs."
#    default: "/data/structure/dcf/scop_raw.dcf"
     knowntype: "raw scop classification file"
  ]

 toggle: grib [
    required: "Y"
    information: "Use Gribskov profile"
    default: "N"
  ]

  toggle: henik [
    required: "Y"
    information: "Use Henikoff profile"
    default: "N"
  ]

  toggle: hmm [
    required: "Y"
    information: "Use HMM profile"
    default: "N"
  ]

  toggle: sam [
    required: "Y"
    information: "Use SAM HMM profile"
    default: "Y"
  ]

  boolean: pssm [
    required: "Y"
    information: "Use PSSM profile"
    default: "Y"
  ]

  boolean: sig [
    required: "Y"
    information: "Use signature"
    default: "N"
  ]


  string: hmmpath [
    required: "$(hmm)"
    information: "Location of HMM profile files (input)"
    default: "./"
  ]

  string: hmmextn  [
    required: "$(hmm)"
    information: "Extension of HMM profile files (input)"
    default: ".hmm"
  ]

  string: sampath [
    required: "$(sam)"
    information: "Location of SAM HMM profile files (input)"
    default: "./"
  ]

  string: samextn [
    required: "$(sam)"
    information: "Extension of SAM HMM profile files (input)"
    default: ".mod"
  ]

  string: pssmpath [
    required: "$(pssm)"
    information: "Location of PSSM profile files (input)"
    default: "./"
  ]

  string: pssmextn [
    required: "$(pssm)"
    information: "Extension of PSSM profile files (input)"
    default: ".chk"
  ]

  integer: niter [
    required: "$(pssm)"
    information: " No. of iterations (input)"
    default: "1"
  ]

  float: thresh [
    required: "$(pssm)"
    information: "E-value threshold (input)"
    default: "100"
  ]

  integer: maxhit [
    required: "$(pssm)"
    information: "Maximum No. of hits to database (input)"
    default: "1000"
  ]

 string: gbvpath  [
    required: "$(grib)"
    information: "Location of Gribskov profile files (input)"
    default: "./"
  ]


  string: gbvextn  [
    required: "$(grib)"
    information: "Extension of Gribskov profile files (input)"
    default: ".grib"
  ]

  string: hnfpath [
    required: "$(henik)"
    information: "Location of Hennikoff profile files (input)"
    default: "./"
  ]

  string: hnfextn [
    required: "$(henik)"
    information: "Extension of Hennikoff profile files (input)"
    default: ".henik"
  ]

  string: sigpath  [
    required: "$(sig)"
    information: "Location of signature files (input)"
    default: "./"
  ]

  string: sigextn [
    required: "$(sig)"
    information: "Extension of signature files (input)"
    default: ".sig"
  ]

  matrixf: sub [
    required: "$(sig)" 
    information: "Residue substitution matrix"
    default: "EBLOSUM62"
  ]

endsection: input

section: required [
  information: "Required section"
  type: "page"
]



   float: gbvgapo [
    required: "$(grib)"
    default: "10.0"
    information: "Gap insertion penalty (gribskov)"
  ]

  float: gbvgape [
    required: "$(grib)"
    default: "0.5"
    information: "Gap extension penalty (gribskov)"
  ]

  float: hnfgapo [
    required: "$(henik)"
    default: "10.0"
    information: "Gap insertion penalty (henikoff)"
  ]
  
  float: hnfgape [
    required: "$(henik)"
    default: "0.5"
    information: "Gap extension penalty (henikoff)"
  ]


  list: nterm [
    required: "$(sig)"
    default: "1"
    minimum: "1"
    maximum: "1"
    values: "1: Align anywhere and allow only complete signature-sequence fit,
             2: Align anywhere and allow partial signature-sequence fit,
             3: Use empirical gaps only"
    delimiter: ","
    codedelimiter: ":"
    header: "N-terminal matching options"
    information: "Select number"
  ]

  float: siggapo [
    required: "$(sig)"
    default: "10.0"
    information: "Gap insertion penalty "
  ]

  float: siggape [
    required: "$(sig)"
    default: "0.5"
    information: "Gap extension penalty "
  ]

endsection: required

section: output [
  information: "Output section"
  type: "page"
]

  string: hmmoutpath  [
    required: "$(hmm)"
    information: "Location of signature hits/library scan files for
                  hmm searches (output)"
    default: "./"
  ]

  string: hmmoutextn [
    required: "$(hmm)"
    information: "Extension of signature hits/library scan files for
                  hmm searches (output)"
    default: ".hmmout"
  ]

  string: samoutpath [
    required: "$(sam)"
    information: "Location of signature hits/library scan files for
                  sam hmm searches (output)"
    default: "./"
  ]

  string: samoutextn [
    required: "$(sam)"
    information: "Extension of signature hits/library scan files for
                  sam hmm searches (output)"
    default: ".samout"
  ]


  string: pssmoutpath  [
    required: "$(pssm)"
    information: "Location of signature hits/library scan files for
                  pssm searches (output)"
    default: "./"
  ]

  string: pssmoutextn [
    required: "$(pssm)"
    information: "Extension of signature hits/library scan files for
                  pssm searches (output)"
    default: ".pssmout"
  ]

  string: gbvoutpath [
    required: "$(grib)"
    information: "Location of signature hits/library scan files for
                  Gribskov profile searches (output)"
    default: "./"
  ]

  string: gbvoutextn [
    required: "$(grib)"
    information: "Extension of signature hits/library scan files for
                  Gribskov profile searches (output)"
    default: ".gribout"
  ]

  string: hnfoutpath  [
    required: "$(henik)"
    information: "Location of signature hits/library scan files for
                  Henikoff profile searches (output)"
    default: "./"
  ]

  string: hnfoutextn [
    required: "$(henik)"
    information: "Extension of signature hits/library scan files for
                  Henikoff profile searches (output)"
    default: ".henikout"
  ]

  string: sigoutpath [
    required: "$(sig)"
    information: "Location of signature hits/library scan files for
                  signature searches (output)"
    default: "./"
  ]

  string: sigoutextn [
    required: "$(sig)"
    information: "Extension for signature hits/library scan files for
                  signature searches (output)"
    default: ".sigout"
  ]

endsection: output
