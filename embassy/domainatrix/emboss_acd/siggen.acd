application: siggen [
  documentation: "Generates a sparse protein signature from
                  an alignment and residue contact data."
  groups: "Protein:3D Structure"
  gui: "yes"
  batch: "yes"
  cpu: "low"
]

section: input [
  information: "Input section"
  type: "page"
]


  string: algpath  [
    parameter: "Y"
    information: "Location of scop alignment files (input)"
    help: "A 'scop family alignment file' contains a sequence
           alignment of domains belonging to the same scop family. The file
           is in embl-like format and is annotated with records describing
           the SCOP classification of the family. A scop family alignment
           file generatd by scopalign will contain a structure-based sequence
           alignment of domains of known structure only. Such alignments can
           be extended with sequence relatives (of unknown structure) to the
           family in question by using seqalign."
    default: "./"
  ]

  string: algextn  [
    parameter: "Y"
    information: "Extension of alignment files"
    default: ".salign"
  ]

endsection: input



section: required [
  information: "Required section"
  type: "page"
]


  list: mode  [
    standard: "Y"
    default: "1"
    minimum: "1"
    maximum: "3"
    delimiter: ","
    codedelimiter: ":"
    values: "1: Use positions specified in alignment file, 2: Use a
             scoring method, 3: Generate a randomised signature"
    header: "Specify mode of signature generation"
    help: "There are 3 modes for signatures generatation: (1) Use
           positions specified in alignment file. The alignment file must
           contain a line beginning with the text 'Positions' for each line
           of the alignment. A '1' in the 'Positions' line indicates that the
           signature should include data from the corresponding alignment
           site. The signature will only include the positions that are
           marked with a '1'. (2) Use a scoring method. The alignment is
           scored (see 'Algorithm') and the signature of a specified sparsity
           is sampled from high scoring positions. (3): Generate a
           randomised signature. A signature of a specified sparsity is
           sampled at random from the alignment."
    information: "Select number"
  ]


  integer: sparsity  [
    standard: "@($(mode)!=1)"
    information: "% sparsity of signature"
    help: "The signature sparsity is a user-defined parameter that
           determines how many residues the final signature will contain, for
           example, if the average sequence length of the proteins in the
           alignment is 250 residues, then a signature of sparsity 10%
           (default value) will contain 25 key residues or signature
           positions, that correspond to the top 25% highest scoring
           alignment positions."
    default: "10"
  ]



  integer: wsiz  [
    standard: "Y"
    information: "Window size"
    help: "When a signature is aligned to a protein sequence, the
           permissible gaps between two signature positions is determined by
           the empirical gaps and the window size. The user is prompted for a
           window size that is used for every position in the signature.
           Likely this is not optimal. A future implementation will provide a
           range of methods for generating values of window size depending
           upon the alignment (window size is identified by the WSIZ record
           in the signature output file)."
    default: "0"
  ]



  list: seqoption  [
    standard: "@($(mode)==2)"
    default: "3"
    minimum: "1"
    maximum: "3"
    delimiter: ","
    codedelimiter: ":"
    values: "1: Substitution matrix, 2: Residue class, 3: None"
    header: "Sequence variability scoring method"
    information: "Select number"
  ]



  matrixf: datafile  [
    standard: "@($(seqoption)==1)"
    information: "Substitution matrix to be used"
    default: "EBLOSUM62"
  ]



  list: conoption  [
    standard: "@($(mode)==2)"
    default: "5"
    minimum: "1"
    maximum: "5"
    delimiter: ","
    codedelimiter: ":"
    values: "1: Number, 2: Conservation, 3: Number and conservation,
             4: None (structural data available), 5: None (no structural
             data available)"
    header: "Residue contacts scoring method"
    information: "Select number"
  ]



  boolean: filtercon  [
    standard: "@($(conoption)!=5)"
    information: "Ignore alignment positions making less than a
                  threshold number of contacts"
    default: "N"
  ]

  integer: conthresh  [
    standard: "$(filtercon)"
    information: "Threshold contact number"
    default: "10"
  ]

  string: conpath  [
    standard: "@($(conoption)!=5)"
    information: "Location of contact files (input)"
    help: "A 'contacts file' contains intra-chain residue-residue
           contact data for a protein or domain. The files are generated by
           contacts and are in embl-like format."
    default: "./"
  ]


  string: conextn  [
    standard: "@($(conoption)!=5)"
    information: "Extension of contact files"
    default: ".con"
  ]


  string: cpdbpath  [
    standard: "@($(conoption)!=5)"
    information: "Location of domain coordinate files (embl
                  format input)"
    help: "A 'domain coordinate file' contains coordinate and other
           data for a single scop domain. The files are generated by domainer
           and are in embl-like and pdb formats."
    default: "./"
  ]

  string: cpdbextn  [
    standard: "@($(conoption)!=5)"
    information: "Extension of coordinate files"
    default: ".pxyz"
  ]

  boolean: filterpsim  [
    standard: "@($(mode)==2)"
    information: "Ignore alignment postitions with post_similar
                  value of 0"
    default: "Y"
  ]

endsection: required





section: output [
  information: "Output section"
  type: "page"
]



  string: sigpath  [
    parameter: "Y"
    information: "Location of signature files (output)"
    help: "A 'signature file' contains a sparse sequence signature.
           The files are generated by siggen."
    default: "./"
  ]

  string: sigextn  [
    parameter: "Y"
    information: "Extension of signature files"
    default: ".sig"
  ]

endsection: output









