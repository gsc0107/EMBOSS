application: scopseqs [
  documentation: "Adds pdb and swissprot sequence records to
                  a scop classification file."
  groups: "Utils:Database creation"
  gui: "yes"
  batch: "yes"
  cpu: "medium"
]

section: input [
  information: "Input section"
  type: "page"
]

  infile: scopin  [
    parameter: "Y"
    information: "Name of scop classification file for input
                  (embl format)"
    help: "A 'scop classification file' contains classification and
           other data for domains from the scop database. The file is in
           embl-like format and is generated by scopparse. Domain sequence
           information can be added to the file by using scopseqs."
  ]



  string: dpdb  [
    parameter: "Y"
    information: "Location of domain coordinate files (embl
                  format input)"
    help: "A 'domain coordinate file' contains coordinate and other
           data for a single scop domain. The files are generated by domainer
           and are in embl-like and pdb formats."
    default: "./"
  ]


  string: extn  [
    parameter: "Y"
    information: "File extension of domain coordinate files
                  (embl format input)"
    default: ".pxyz"
  ]

endsection: input



section: required [
  information: "Required section"
  type: "page"
]

boolean: getswiss  [
  required: "Y"
  information: "Retrieve swissprot sequence"
  default: "N"
]	

  infile: pdbtosp  [
    required: "$(getswiss)"
    information: "Name of the pdbcodes to swissprot indexing
                  file (embl format)"
    help: "The swissprot:pdb equivalence file is generated by pdbtosp
           and is part of the emboss distribution."
    nullok: "Y"
  ]

endsection: required

section: advanced [
  information: "Advanced section"
  type: "page"
]


  matrixf: datafile  [
    optional: "Y"
    information: "Residue substitution matrix"
    default: "EBLOSUM62"
  ]

  float: gapopen  [
    optional: "Y"
    information: "Gap insertion penalty"
    minimum: "1."
    maximum: "100."
    default: "10"
    valid: "Floating point number from 1.0 to 100.0"
    expected: "10.0 for any sequence"
    help: "The gap insertion penalty is the score taken away when a
           gap is created. The best value depends on the choice of comparison
           matrix. The default value assumes you are using the EBLOSUM62
           matrix for protein sequences, and the EDNAFULL matrix for
           nucleotide sequences."
  ]



  float: gapextend  [
    optional: "Y"
    information: "Gap extension penalty"
    minimum: "0.0"
    maximum: "10."
    default: "0.5"
    valid: "Floating point number from 0.0 to 10.0"
    expected: "0.5 for any sequence"
    help: "The gap extension, penalty is added to the standard gap
           penalty for each base or residue in the gap. This is how long gaps
           are penalized. Usually you will expect a few long gaps rather
           than many short gaps, so the gap extension penalty should be lower
           than the gap penalty. An exception is where one or both sequences
           are single reads with possible sequencing errors in which case
           you would expect many single base gaps. You can get this result by
           setting the gap open penalty to zero (or very low) and using the
           gap extension penalty to control gap scoring."
  ]

endsection: advanced


section: output [
  information: "Output section"
  type: "page"
]



  outfile: scopout  [
    parameter: "Y"
    information: "Name of scop classification file (embl format
                  output)"
    help: "A 'scop classification file' contains classification and
           other data for domains from the scop database. The file is in
           embl-like format and is generated by scopparse. Domain sequence
           information can be added to the file by using scopseqs."
    default: "test.scop"
  ]

  outfile: errf  [
    parameter: "Y"
    information: "Name of log file for the build"
    help: "The log file contains messages about any errors arising
           while scopseqs ran."
    default: "scopseqs.log"
  ]

endsection: output

