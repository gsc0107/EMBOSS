application: domainseqs [
  documentation: "Adds sequence records to a DCF file."
  groups: "Utils:Database creation"
  gui: "yes"
  batch: "yes"
  cpu: "medium"
  embassy: "domainatrix"
]

section: input [
  information: "Input section"
  type: "page"
]

  infile: dcfinfile [
    parameter: "Y"
    information: "Domain classification file"
    help: "This option specifies the name of DCF file (domain
           classification file) (input). A 'domain classification file'
           contains classification and other data for domains from SCOP or
           CATH, in DCF format (EMBL-like). The files are generated by using
           SCOPPARSE and CATHPARSE. Domain sequence information can be added
           to the file by using DOMAINSEQS."
    knowntype: "domain classification"
  ]

  directory: dpdbdir [
    parameter: "Y"
    information: "Clean domain coordinates directory"
    help: "This option specifies the location of domain CCF file
           (clean coordinate files) (input). A 'clean cordinate file'
           contains coordinate and other data for a single PDB file or a
           single domain from SCOP or CATH, in CCF format (EMBL-like). The
           files, generated by using PDBPARSE (PDB files) or DOMAINER
           (domains), contain 'cleaned-up' data that is self-consistent and
           error-corrected. Records for residue solvent accessibility and
           secondary structure are added to the file by using PDBPLUS."
    default: "./"
    extension: "ccf"
    knowntype: "domain clean coordinates"
  ]

  toggle: getswiss [
    standard: "Y"
    information: "Retrieve swissprot sequence."
    default: "N"
  ]

  infile: pdbtospfile [
    standard: "$(getswiss)"
    information: "Swissprot:pdb equivalence table file
                  (optional)"
    help: "This option specifies the name of the pdbcodes to swissprot
           indexing file. The swissprot:PDB equivalence file is generated by
           PDBTOSP"
    knowntype: "swissprot pdb equivalence table"
    nullok: "Y"
  ]

  matrixf: datafile [
    additional: "$(getswiss)"
    information: "Residue substitution matrix."
    help: "This option specifies the residue substitution matrix,
           which is used for sequence comparison."
    default: "EBLOSUM62"
  ]

endsection: input

section: required [
  information: "Required section"
  type: "page"
]

endsection: required

section: additional [
  information: "Additional section"
  type: "page"
]

  float: gapopen [
    additional: "$(getswiss)"
    information: "Gap insertion penalty."
    minimum: "1."
    maximum: "100."
    default: "10"
    valid: "Floating point number from 1.0 to 100.0"
    expected: "10.0 for any sequence"
    help: "This option specifies the gap insertion penalty. This is
           the score taken away when a gap is created. The best value depends
           on the choice of comparison matrix. The default value assumes you
           are using the EBLOSUM62 matrix for protein sequences, and the
           EDNAFULL matrix for nucleotide sequences."
  ]

  float: gapextend [
    additional: "$(getswiss)"
    information: "Gap extension penalty."
    minimum: "0.0"
    maximum: "10."
    default: "0.5"
    valid: "Floating point number from 0.0 to 10.0"
    expected: "0.5 for any sequence"
    help: "This option specifies the gap extension penalty. This is
           added to the standard gap penalty for each base or residue in the
           gap. This is how long gaps are penalized. Usually you will expect
           a few long gaps rather than many short gaps, so the gap extension
           penalty should be lower than the gap penalty."
  ]

endsection: additional

section: output [
  information: "Output section"
  type: "page"
]

  outfile: dcfoutfile [
    parameter: "Y"
    information: "Domain classification output file"
    help: "This option specifies the name of DCF file (domain
           classification file) (output). A 'domain classification file'
           contains classification and other data for domains from SCOP or
           CATH, in DCF format (EMBL-like). The files are generated by using
           SCOPPARSE and CATHPARSE. Domain sequence information can be added
           to the file by using DOMAINSEQS."
    default: "domainseqs.out"
    knowntype: "domain classification"
  ]

  outfile: logfile [
    standard: "Y"
    information: "Domainatrix log output file"
    help: "This option specifies the name of log file for the build.
           The log file contains messages about any errors arising while
           domainseqs ran."
    default: "domainseqs.log"
    knowntype: "domainatrix log"
  ]

endsection: output
