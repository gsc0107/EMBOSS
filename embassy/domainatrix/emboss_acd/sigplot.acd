application: sigplot [
  documentation: "Generates data files of signature
                  performance"
  groups: "PROTEIN:3D STRUCTURE"
]

section: input
  information: "Input section"
  type: "page"
]

  list: mode  [
    required: "Y"
    default: "1"
    minimum: "1"
    maximum: "1"
    delimiter: ","
    codedelimiter: ":"
    values: "1: Do not merge results (multiple plots), 2: Merge
             results (single plot)"
    header: "Plotting mode"
    information: "Select mode of operation"
    button: "Y"
    help: "sigplot runs in one of two modes either (i) 'do not merge
           mode' or (ii) 'merge mode'. In 'do not merge mode', ROC analysis
           is performed on each signature hits file individually; the results
           are presented as different lines within a single graph. In 'merge
           mode' the lists of hits in the signature hits files are merged
           and ROC analysis is performed on the whole; a single plot on the
           graph is given."
  ]

  string: hitdir  [
    parameter: "Y"
    information: "Location of signature hits files (input)"
    help: "A 'signature hits file' contains the results of a search of
           a discriminating element (one of protein signature, hidden Markov
           model, simple frequency matrix, Gribskov profile or Hennikoff
           profile) against a sequence database. The files are generated by
           sigscan and libscan."
    default: "./"
  ]

  string: hitextn  [
    parameter: "Y"
    information: "Extension of signature hits files (input)"
    default: ".sighits"
  ]

  infile: validatin  [
    parameter: "Y"
    information: "Name of scop validation file (input)"
    help: "A 'scop validation file' contains sequence relatives (hits)
           for each of a number of different scop families, superfamilies
           and folds. The file contains the collated results from psiblast
           searches of a sequence database for the indvidual scop families;
           hits of unambiguous family assignment are listed under their
           respective family, otherwise a hit is assigned as relatives to a
           scop superfamily or fold instead. The scop validation file is
           generated by seqnr and is in embl-like format."
  ]

  boolean: splithit  [
    required: "Y"
    information: "Graph 'true' hits as proportion of redundant
                  and non-redundant hits"
    default: "Y"
  ]

  integer: rocval  [
    required: "Y"
    information: "Number of false hits to consider for ROC
                  curve"
    default: "50"
  ]

endsection: input

section: required
  information: "Required section"
  type: "page"
]

  boolean: seedid  [
    required: "Y"
    information: "Generate matrix of %id between seed proteins
                  and hits"
    default: "Y"
  ]

endsection: required

section: advanced
  information: "Advanced section"
  type: "page"
]

  infile: alignfile  [
    required: "$(seedid)"
    nullok: "Y"
    information: "Name of scop alignment file for input"
    help: "A 'scop family alignment file' contains a sequence
           alignment of domains belonging to the same scop family. The file
           is in embl-like format and is annotated with records describing
           the SCOP classification of the family. A scop family alignment
           file generatd by scopalign will contain a structure-based sequence
           alignment of domains of known structure only. Such alignments can
           be extended with sequence relatives (of unknown structure) to the
           family in question by using seqalign."
  ]

  string: aligndir  [
    required: "$(seedid)"
    information: "Location of sigscan alignment files for
                  input"
    default: "./"
  ]

  string: alignextn  [
    required: "$(seedid)"
    information: "Extension of sigscan alignment files"
    default: ".sigalign"
  ]

  matrixf: submat  [
    required: "$(seedid)"
    information: "Substitution matrix to be used"
    default: "./EBLOSUM62"
  ]

  float: gapopen  [
    required: "$(seedid)"
    information: "Gap insertion penalty"
    minimum: "1."
    maximum: "100."
    default: "10"
    valid: "Floating point number from 1.0 to 100.0"
    expected: "10.0 for any sequence"
    help: "The gap insertion penalty is the score taken away when a
           gap is created. The best value depends on the choice of comparison
           matrix. The default value assumes you are using the EBLOSUM62
           matrix for protein sequences, and the EDNAFULL matrix for
           nucleotide sequences."
  ]

  float: gapextn  [
    required: "$(seedid)"
    information: "Gap extension penalty"
    minimum: "0.0"
    maximum: "10."
    default: "0.5"
    valid: "Floating point number from 0.0 to 10.0"
    expected: "0.5 for any sequence"
    help: "The gap extension, penalty is added to the standard gap
           penalty for each base or residue in the gap. This is how long gaps
           are penalized. Usually you will expect a few long gaps rather
           than many short gaps, so the gap extension penalty should be lower
           than the gap penalty. An exception is where one or both sequences
           are single reads with possible sequencing errors in which case
           you would expect many single base gaps. You can get this result by
           setting the gap open penalty to zero (or very low) and using the
           gap extension penalty to control gap scoring."
  ]

endsection: advanced

section: output
  information: "Output section"
  type: "page"
]

  string: outdir  [
    parameter: "Y"
    information: "Location of gnuplot data files (output)"
    default: "./"
  ]

endsection: output
