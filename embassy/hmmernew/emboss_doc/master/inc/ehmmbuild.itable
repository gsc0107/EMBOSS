<table border cellspacing=0 cellpadding=3 bgcolor="#ccccff">
<tr bgcolor="#FFFFCC">
<th align="left">Qualifier</th>
<th align="left">Type</th>
<th align="left">Description</th>
<th align="left">Allowed values</th>
<th align="left">Default</th>
</tr>

<tr bgcolor="#FFFFCC">
<th align="left" colspan=5>Standard (Mandatory) qualifiers</th>
</tr>

<tr bgcolor="#FFFFCC">
<td>[-alignfile]<br>(Parameter 1)</td>
<td>seqset</td>
<td>(Aligned) protein sequence set filename and optional format, or reference (input USA)</td>
<td>Readable set of sequences</td>
<td><b>Required</b></td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-nhmm</td>
<td>string</td>
<td>Name for this HMM. The name can be any string of non-whitespace characters (e.g. one 'word'). There is no length limit (at least not one imposed by HMMER; your shell will complain about command line lengths frst).</td>
<td>Any word</td>
<td>&nbsp;</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-strategy</td>
<td>list</td>
<td>All alignments are local with respect to the sequence and are configured to be local (fragmentary) or global with respect to the HMM. The model is also configured to find a single or multiple domains (matches) to a sequence. The options for configuring the model are as follows: (D): The default setting. Multiple domains per sequence, global alignments with respect to the HMM. (F): Multiple domains per sequence, local alignments with respect to the HMM. Analogous to the old hmmfs program of HMMER 1. (G) Single domain per sequence, global alignment with respect to the HMM. Analogous to the old hmms program of HMMER 1. (S) Single domain per sequence, local alignments with respect to the HMM. Analogous to the old hmmsw program of HMMER 1.</td>
<td><table><tr><td>D</td> <td><i>(global-multidomain)</i></td></tr><tr><td>F</td> <td><i>(local-multidomain)</i></td></tr><tr><td>G</td> <td><i>(global-singledomain)</i></td></tr><tr><td>S</td> <td><i>(local-singledomain)</i></td></tr></table></td>
<td>D</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>[-hmmfile]<br>(Parameter 2)</td>
<td>outfile</td>
<td>HMMER hidden markov model output file</td>
<td>Output file</td>
<td><i>&lt;*&gt;</i>.ehmmbuild</td>
</tr>

<tr bgcolor="#FFFFCC">
<th align="left" colspan=5>Additional (Optional) qualifiers</th>
</tr>

<tr>
<td colspan=5>(none)</td>
</tr>

<tr bgcolor="#FFFFCC">
<th align="left" colspan=5>Advanced (Unprompted) qualifiers</th>
</tr>

<tr bgcolor="#FFFFCC">
<td>-prior</td>
<td>infile</td>
<td>Read a Dirichlet prior from file, replacing the default mixture Dirichlet. The format of prior files is documented in the User's Guide, and an example is given in the Demos directory of the HMMER distribution.</td>
<td>Input file</td>
<td><b>Required</b></td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-null</td>
<td>infile</td>
<td>Read a null model from file. The default for protein is to use average amino acid frequencies from Swissprot 34 and p1 = 350/351; for nucleic acid, the default is to use 0.25 for each base and p1 = 1000/1001. For documentation of the format of the null model file and further explanation of how the null model is used, see the User's Guide.</td>
<td>Input file</td>
<td><b>Required</b></td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-pam</td>
<td>infile</td>
<td>Apply a heuristic PAM- (substitution matrix-) based prior on match emission probabilities instead of the default mixture Dirichlet. The substitution matrix is read from file. See -pamwgt. The default Dirichlet state transition prior and insert emission prior are unaffected. Therefore in principle you could combine -prior with -pam but this isn't recommended, as it hasn't been tested. ( -pam itself hasn't been tested much!)</td>
<td>Input file</td>
<td><b>Required</b></td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-pamwgt</td>
<td>float</td>
<td>Controls the weight &lt;x&gt; on a PAM-based prior. Only has effect if -pam option is also in use. &lt;x&gt; is a positive real number, 20.0 by default. &lt;x&gt; is the number of 'pseudocounts' contriubuted by the heuristic prior. Very high values of &lt;x&gt; can force a scoring system that is entirely driven by the substitution matrix, making HMMER somewhat approximate Gribskov profiles.</td>
<td>Any numeric value</td>
<td>20.0</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-pbswitch</td>
<td>integer</td>
<td>For alignments with a very large number of sequences, the GSC, BLOSUM, and Voronoi weighting schemes are slow; they're O(N^2) for N sequences. Henikoff position-based weights (PB weights) are more effcient. At or above a certain threshold sequence number &lt;n&gt; hmmbuild will switch from GSC, BLOSUM, or Voronoi weights to PB weights. To disable this switching behavior (at the cost of compute time, set &lt;n&gt; to be something larger than the number of sequences in your alignment. &lt;n&gt; is a positive integer; the default is 1000.</td>
<td>Any integer value</td>
<td>1000</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-archpri</td>
<td>float</td>
<td>The value of the 'architecture prior' used by MAP architecture construction. This value is a probability between 0 and 1. This parameter governs a geometric prior distribution over model lengths. As 'archpri' increases, longer models are favored a priori. As 'archpri' decreases, it takes more residue conservation in a column to make a column a 'consensus' match column in the model architecture. The 0.85 default has been chosen empirically as a reasonable setting.</td>
<td>Any numeric value</td>
<td>0.85</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-binary</td>
<td>boolean</td>
<td>Write the HMM to file in HMMER binary format instead of readable ASCII text.</td>
<td>Boolean value Yes/No</td>
<td>No</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-fast</td>
<td>boolean</td>
<td>Quickly and heuristically determine the architecture of the model by assigning all columns with more than a certain fraction of gap characters to insert states. By default this fraction is 0.5, and it can be changed using the --gapmax option. The default construction algorithm is a maximum a posteriori (MAP) algorithm, which is slower.</td>
<td>Boolean value Yes/No</td>
<td>No</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-gapmax</td>
<td>float</td>
<td>Controls the -fast model construction algorithm, but if -fast is not being used, has no effect. If a column has more than a fraction &lt;x&gt; of gap symbols in it, it gets assigned to an insert column. &lt;x&gt; is a frequency from 0 to 1, and by default is set to 0.5. Higher values of &lt;x&gt; mean more columns get assigned to consensus, and models get longer; smaller values of &lt;x&gt; mean fewer columns get assigned to consensus, and models get smaller.</td>
<td>Any numeric value</td>
<td>0.5</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-hand</td>
<td>boolean</td>
<td>Specify the architecture of the model by hand: the alignment file must be in SELEX or Stockholm format, and the reference annotation line (RF in SELEX, GC RF in Stockholm) is used to specify the architecture. Any column marked with a non-gap symbol (such as an 'x', for instance) is assigned as a consensus (match) column in the model.</td>
<td>Boolean value Yes/No</td>
<td>No</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-sidlevel</td>
<td>float</td>
<td>Controls both the determination of effective sequence number and the behavior of the -wblosum weighting option. The sequence alignment is clustered by percent identity, and the number of clusters at a cutoff threshold of &lt;x&gt; is used to determine the effective sequence number. Higher values of &lt;x&gt; give more clusters and higher effective sequence numbers; lower values of &lt;x&gt; give fewer clusters and lower effective sequence numbers. &lt;x&gt; is a fraction from 0 to 1, and by default is set to 0.62 (corresponding to the clustering level used in constructing the BLOSUM62 substitution matrix).</td>
<td>Any numeric value</td>
<td>0.62</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-noeff</td>
<td>boolean</td>
<td>Turn off the effective sequence number calculation, and use the true number of sequences instead. This will usually reduce the sensitivity of the final model (so don't do it without good reason!)</td>
<td>Boolean value Yes/No</td>
<td>No</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-swentry</td>
<td>float</td>
<td>Controls the total probability that is distributed to local entries into the model, versus starting at the beginning of the model as in a global alignment. &lt;x&gt; is a probability from 0 to 1, and by default is set to 0.5. Higher values of &lt;x&gt; mean that hits that are fragments on their left (N or 5'-terminal) side will be penalized less, but complete global alignments will be penalized more. Lower values of &lt;x&gt; mean that fragments on the left will be penalized more, and global alignments on this side will be favored. This option only affects the confgurations that allow local alignments, e.g. -s and -f; unless one of these options is also activated, this option has no effect. You have independent control over local/global alignment behavior for the N/C (5'/3') termini of your target sequences using --swentry and --swexit.</td>
<td>Any numeric value</td>
<td>0.5</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-swexit</td>
<td>float</td>
<td>Controls the total probability that is distributed to local exits from the model, versus ending an alignment at the end of the model as in a global alignment. &lt;x&gt; is a probability from 0 to 1, and by default is set to 0.5. Higher values of &lt;x&gt; mean that hits that are fragments on their right (C or 3'-terminal) side will be penalized less, but complete global alignments will be penalized more. Lower values of &lt;x&gt; mean that fragments on the right will be penalized more, and global alignments on this side will be favored. This option only affects the confgurations that allow local alignments, e.g. -s and -f; unless one of these options is also activated, this option has no effect. You have independent control over local/global alignment behavior for the N/C (5'/3') termini of your target sequences using -swentry and -swexit.</td>
<td>Any numeric value</td>
<td>0.5</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-verbosity</td>
<td>boolean</td>
<td>Print more possibly useful stuff, such as the individual scores for each sequence in the alignment.</td>
<td>Boolean value Yes/No</td>
<td>No</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-weighting</td>
<td>list</td>
<td>Values (B)(-wblosum in HMMER) Use the BLOSUM filtering algorithm to weight the sequences. Cluster the sequences at a given percentage identity (see -idlevel); assign each cluster a total weight of 1.0, distributed equally amongst the members of that cluster. (G)(-wgsc in HMMER) Use the Gerstein/Sonnhammer/Chothia ad hoc sequence weighting algorithm. This is the default. (K)(-wme in HMMER) Use the Krogh/Mitchison maximum entropy algorithm to 'weight' the sequences. This supercedes the Eddy/Mitchison/Durbin maximum discrimination algorithm, which gives almost identical weights but is less robust. ME weighting seems to give a marginal increase in sensitivity over the default GSC weights, but takes a fair amount of time. (W) (-wpb in HMMER) Use the Henikoff position-based weighting scheme. (V) (-wvoronoi in HMMER) Use the Sibbald/Argos Voronoi sequence weighting algorithm in place of the default GSC weighting. (N) (-wnone in HMMER) Turn off all sequence weighting.</td>
<td><table><tr><td>B</td> <td><i>(Blosum)</i></td></tr><tr><td>G</td> <td><i>(Gerstein/Sonnhammer/Chothia)</i></td></tr><tr><td>K</td> <td><i>(Krogh/Mitchison)</i></td></tr><tr><td>W</td> <td><i>(Henikoff)</i></td></tr><tr><td>V</td> <td><i>(Sibbald/Argos Voronoi)</i></td></tr><tr><td>N</td> <td><i>(None)</i></td></tr></table></td>
<td>G</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-o</td>
<td>outfile</td>
<td>Re-save the starting alignment to file, in Stockholm format. The columns which were assigned to match states will be marked with x's in an RF annotation line. If either the -hand or -fast construction options were chosen, the alignment may have been slightly altered to be compatible with Plan 7 transitions, so saving the final alignment and comparing to the starting alignment can let you view these alterations. See the User's Guide for more information on this arcane side effect.</td>
<td>Output file</td>
<td><i>&lt;*&gt;</i>.ehmmbuild</td>
</tr>

<tr bgcolor="#FFFFCC">
<td>-cfile</td>
<td>outfile</td>
<td>Save the observed emission and transition counts to file after the architecture has been determined (e.g. after residues/gaps have been assigned to match, delete, and insert states). This option is used in HMMER development for generating data files useful for training new Dirichlet priors. The format of count files is documented in the User's Guide.</td>
<td>Output file</td>
<td><i>&lt;*&gt;</i>.ehmmbuild</td>
</tr>

<tr bgcolor="#FFFFCC">
<th align="left" colspan=5>Associated qualifiers</th>
</tr>

<tr bgcolor="#FFFFCC">
<th align="left" colspan=5>"-alignfile" associated seqset qualifiers
</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -sbegin1<br>-sbegin_alignfile</td>
<td>integer</td>
<td>Start of each sequence to be used</td>
<td>Any integer value</td>
<td>0</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -send1<br>-send_alignfile</td>
<td>integer</td>
<td>End of each sequence to be used</td>
<td>Any integer value</td>
<td>0</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -sreverse1<br>-sreverse_alignfile</td>
<td>boolean</td>
<td>Reverse (if DNA)</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -sask1<br>-sask_alignfile</td>
<td>boolean</td>
<td>Ask for begin/end/reverse</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -snucleotide1<br>-snucleotide_alignfile</td>
<td>boolean</td>
<td>Sequence is nucleotide</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -sprotein1<br>-sprotein_alignfile</td>
<td>boolean</td>
<td>Sequence is protein</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -slower1<br>-slower_alignfile</td>
<td>boolean</td>
<td>Make lower case</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -supper1<br>-supper_alignfile</td>
<td>boolean</td>
<td>Make upper case</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -sformat1<br>-sformat_alignfile</td>
<td>string</td>
<td>Input sequence format</td>
<td>Any string</td>
<td>&nbsp;</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -sdbname1<br>-sdbname_alignfile</td>
<td>string</td>
<td>Database name</td>
<td>Any string</td>
<td>&nbsp;</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -sid1<br>-sid_alignfile</td>
<td>string</td>
<td>Entryname</td>
<td>Any string</td>
<td>&nbsp;</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -ufo1<br>-ufo_alignfile</td>
<td>string</td>
<td>UFO features</td>
<td>Any string</td>
<td>&nbsp;</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -fformat1<br>-fformat_alignfile</td>
<td>string</td>
<td>Features format</td>
<td>Any string</td>
<td>&nbsp;</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -fopenfile1<br>-fopenfile_alignfile</td>
<td>string</td>
<td>Features file name</td>
<td>Any string</td>
<td>&nbsp;</td>
</tr>

<tr bgcolor="#FFFFCC">
<th align="left" colspan=5>"-hmmfile" associated outfile qualifiers
</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -odirectory2<br>-odirectory_hmmfile</td>
<td>string</td>
<td>Output directory</td>
<td>Any string</td>
<td>&nbsp;</td>
</tr>

<tr bgcolor="#FFFFCC">
<th align="left" colspan=5>"-o" associated outfile qualifiers
</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -odirectory</td>
<td>string</td>
<td>Output directory</td>
<td>Any string</td>
<td>&nbsp;</td>
</tr>

<tr bgcolor="#FFFFCC">
<th align="left" colspan=5>"-cfile" associated outfile qualifiers
</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -odirectory</td>
<td>string</td>
<td>Output directory</td>
<td>Any string</td>
<td>&nbsp;</td>
</tr>

<tr bgcolor="#FFFFCC">
<th align="left" colspan=5>General qualifiers</th>
</tr>

<tr bgcolor="#FFFFCC">
<td> -auto</td>
<td>boolean</td>
<td>Turn off prompts</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -stdout</td>
<td>boolean</td>
<td>Write first file to standard output</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -filter</td>
<td>boolean</td>
<td>Read first file from standard input, write first file to standard output</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -options</td>
<td>boolean</td>
<td>Prompt for standard and additional values</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -debug</td>
<td>boolean</td>
<td>Write debug output to program.dbg</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -verbose</td>
<td>boolean</td>
<td>Report some/full command line options</td>
<td>Boolean value Yes/No</td>
<td>Y</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -help</td>
<td>boolean</td>
<td>Report command line options and exit. More information on associated and general qualifiers can be found with -help -verbose</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -warning</td>
<td>boolean</td>
<td>Report warnings</td>
<td>Boolean value Yes/No</td>
<td>Y</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -error</td>
<td>boolean</td>
<td>Report errors</td>
<td>Boolean value Yes/No</td>
<td>Y</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -fatal</td>
<td>boolean</td>
<td>Report fatal errors</td>
<td>Boolean value Yes/No</td>
<td>Y</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -die</td>
<td>boolean</td>
<td>Report dying program messages</td>
<td>Boolean value Yes/No</td>
<td>Y</td>
</tr>

<tr bgcolor="#FFFFCC">
<td> -version</td>
<td>boolean</td>
<td>Report version number and exit</td>
<td>Boolean value Yes/No</td>
<td>N</td>
</tr>

</table>
