
                                   cusp 
                                      
   
   
Function

   Create a codon usage table
   
Description

   Reads one or more coding sequences (CDS sequence only) and calculates
   a codon frequency table.
   
   The output file can be used as a codon usage table in other
   applications.
   
Usage

   Here is a sample session with cusp
   
   This example uses only one input sequence. The normal use would be to
   use a set of coding sequences as the input.
   

% cusp -sbeg 135 -send 1292
Create a codon usage table
Input sequence(s): tembl:paamir
Output file [paamir.cusp]: 
   
   Go to the input files for this example
   Go to the output files for this example
   
Command line arguments

   Mandatory qualifiers:
  [-sequence]          seqall     Sequence database USA
  [-outfile]           outfile    Output file name

   Optional qualifiers: (none)
   Advanced qualifiers:
   -cfile              codon      Codon usage table name

   General qualifiers:
  -help                boolean    Report command line options. More
                                  information on associated and general
                                  qualifiers can be found with -help -verbose
   

   Mandatory qualifiers Allowed values Default
   [-sequence]
   (Parameter 1) Sequence database USA Readable sequence(s) Required
   [-outfile]
   (Parameter 2) Output file name Output file <sequence>.cusp
   Optional qualifiers Allowed values Default
   (none)
   Advanced qualifiers Allowed values Default
   -cfile Codon usage table name Codon usage file in EMBOSS data path
   Ehum.cut
   
Input file format

  Input files for usage example
  
   'tembl:paamir' is a sequence entry in the example nucleic acid
   database 'tembl'
   
  Database entry: tembl:paamir
  
>PAAMIR X13776.1 Pseudomonas aeruginosa amiC and amiR gene for aliphatic amidas
e regulation
ggtaccgctggccgagcatctgctcgatcaccaccagccgggcgacgggaactgcacgat
ctacctggcgagcctggagcacgagcgggttcgcttcgtacggcgctgagcgacagtcac
aggagaggaaacggatgggatcgcaccaggagcggccgctgatcggcctgctgttctccg
aaaccggcgtcaccgccgatatcgagcgctcgcacgcgtatggcgcattgctcgcggtcg
agcaactgaaccgcgagggcggcgtcggcggtcgcccgatcgaaacgctgtcccaggacc
ccggcggcgacccggaccgctatcggctgtgcgccgaggacttcattcgcaaccgggggg
tacggttcctcgtgggctgctacatgtcgcacacgcgcaaggcggtgatgccggtggtcg
agcgcgccgacgcgctgctctgctacccgaccccctacgagggcttcgagtattcgccga
acatcgtctacggcggtccggcgccgaaccagaacagtgcgccgctggcggcgtacctga
ttcgccactacggcgagcgggtggtgttcatcggctcggactacatctatccgcgggaaa
gcaaccatgtgatgcgccacctgtatcgccagcacggcggcacggtgctcgaggaaatct
acattccgctgtatccctccgacgacgacttgcagcgcgccgtcgagcgcatctaccagg
cgcgcgccgacgtggtcttctccaccgtggtgggcaccggcaccgccgagctgtatcgcg
ccatcgcccgtcgctacggcgacggcaggcggccgccgatcgccagcctgaccaccagcg
aggcggaggtggcgaagatggagagtgacgtggcagaggggcaggtggtggtcgcgcctt
acttctccagcatcgatacgcccgccagccgggccttcgtccaggcctgccatggtttct
tcccggagaacgcgaccatcaccgcctgggccgaggcggcctactggcagaccttgttgc
tcggccgcgccgcgcaggccgcaggcaactggcgggtggaagacgtgcagcggcacctgt
acgacatcgacatcgacgcgccacaggggccggtccgggtggagcgccagaacaaccaca
gccgcctgtcttcgcgcatcgcggaaatcgatgcgcgcggcgtgttccaggtccgctggc
agtcgcccgaaccgattcgccccgacccttatgtcgtcgtgcataacctcgacgactggt
ccgccagcatgggcgggggaccgctcccatgagcgccaactcgctgctcggcagcctgcg
cgagttgcaggtgctggtcctcaacccgccgggggaggtcagcgacgccctggtcttgca
gctgatccgcatcggttgttcggtgcgccagtgctggccgccgccggaagccttcgacgt
gccggtggacgtggtcttcaccagcattttccagaatggccaccacgacgagatcgctgc
gctgctcgccgccgggactccgcgcactaccctggtggcgctggtggagtacgaaagccc
cgcggtgctctcgcagatcatcgagctggagtgccacggcgtgatcacccagccgctcga
tgcccaccgggtgctgcctgtgctggtatcggcgcggcgcatcagcgaggaaatggcgaa
gctgaagcagaagaccgagcagctccaggaccgcatcgccggccaggcccggatcaacca
ggccaaggtgttgctgatgcagcgccatggctgggacgagcgcgaggcgcaccagcacct
gtcgcgggaagcgatgaagcggcgcgagccgatcctgaagatcgctcaggagttgctggg
aaacgagccgtccgcctgagcgatccgggccgaccagaacaataacaagaggggtatcgt
catcatgctgggactggttctgctgtacgttggcgcggtgctgtttctcaatgccgtctg
gttgctgggcaagatcagcggtcgggaggtggcggtgatcaacttcctggtcggcgtgct
gagcgcctgcgtcgcgttctacctgatcttttccgcagcagccgggcagggctcgctgaa
ggccggagcgctgaccctgctattcgcttttacctatctgtgggtggccgccaaccagtt
cctcgag
   
Output file format

  Output files for usage example
  
  File: paamir.cusp
  
# CUSP codon usage file
# Codon Amino acid      Fract   /1000   Number
GCA     A               0.077   7.772   3
GCC     A               0.462   46.632  18
GCG     A               0.462   46.632  18
GCT     A               0.000   0.000   0
TGC     C               1.000   10.363  4
TGT     C               0.000   0.000   0
GAC     D               0.864   49.223  19
GAT     D               0.136   7.772   3
GAA     E               0.269   18.135  7
GAG     E               0.731   49.223  19
TTC     F               1.000   28.497  11
TTT     F               0.000   0.000   0
GGA     G               0.062   5.181   2
GGC     G               0.719   59.585  23
GGG     G               0.125   10.363  4
GGT     G               0.094   7.772   3
CAC     H               0.727   20.725  8
CAT     H               0.273   7.772   3
ATA     I               0.000   0.000   0
ATC     I               0.800   41.451  16
ATT     I               0.200   10.363  4
AAA     K               0.000   0.000   0
AAG     K               1.000   5.181   2
CTA     L               0.000   0.000   0
CTC     L               0.269   18.135  7
CTG     L               0.577   38.860  15
CTT     L               0.000   0.000   0
TTA     L               0.000   0.000   0
TTG     L               0.154   10.363  4
ATG     M               1.000   15.544  6
AAC     N               1.000   28.497  11
AAT     N               0.000   0.000   0
CCA     P               0.074   5.181   2
CCC     P               0.222   15.544  6
CCG     P               0.630   44.041  17
CCT     P               0.074   5.181   2
CAA     Q               0.062   2.591   1
CAG     Q               0.938   38.860  15
AGA     R               0.000   0.000   0
AGG     R               0.029   2.591   1
CGA     R               0.000   0.000   0
CGC     R               0.629   56.995  22
CGG     R               0.314   28.497  11
CGT     R               0.029   2.591   1
AGC     S               0.304   18.135  7
AGT     S               0.087   5.181   2
TCA     S               0.000   0.000   0
TCC     S               0.261   15.544  6
TCG     S               0.304   18.135  7
TCT     S               0.043   2.591   1
ACA     T               0.000   0.000   0
ACC     T               0.733   28.497  11
ACG     T               0.267   10.363  4
ACT     T               0.000   0.000   0
GTA     V               0.030   2.591   1
GTC     V               0.394   33.679  13
GTG     V               0.576   49.223  19
GTT     V               0.000   0.000   0
TGG     W               1.000   12.953  5
TAC     Y               0.619   33.679  13
TAT     Y               0.381   20.725  8
TAA     *               0.000   0.000   0
TAG     *               0.000   0.000   0
TGA     *               1.000   2.591   1
   
   The example usage read in a single CDS from Pseudomonas aeruginosa
   which has a very high GC content ands a strong coding bias, as shown
   by the codons for Alanine where those ending with G or C are used
   almost exclusively.
   
   The 'Fract' column gives the faction of all amino acids coded for by
   this codon triplet.
   
   The /1000 column represents the number of codons, given the input
   sequence(s), there are per 1000 bases. This will be an extrapolation
   if the sequence is shorter than 1000 bases.
   
   If multiple sequences are input then the statistics are given for all
   of the sequences together, not individually.
   
Data files

   cusp reads a codon usage file, but only as a template and does not use
   any of the data so any file will give the same results.
   
Notes

   None.
   
References

   None.
   
Warnings

   None.
   
Diagnostic Error Messages

   None.
   
Exit status

   Always exits with status 0.
   
Known bugs

   None.
   
See also

   Program name                  Description
   cai          CAI codon adaptation index
   chips        Codon usage statistics
   codcmp       Codon usage table comparison
   syco         Synonymous codon usage Gribskov statistic plot
   
Author(s)

   This application was written by Alan Bleasby (ableasby@hgmp.mrc.ac.uk)
   
History

   Spring 2000 - written
   
Target users

   This program is intended to be used by everyone and everything, from
   naive users to embedded scripts.
   
Comments
